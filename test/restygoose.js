var request = require('supertest-as-promised'),
	mongoose = require('mongoose'),
	Schema = mongoose.Schema,
	app = require('express')(),
	Restify = require('../index'),
	async = require('async'),
	expect = require('chai').expect;

mongoose.connect('mongodb://localhost/testmocha');

var customers = new Schema({
	id : { type : Number },
	name : { type: String },
	lastname : { type : String },
});

var users = new Schema({
	username : { type: String },
	password : { type : String },
});

var customersModel = mongoose.model('customers', customers);
var usersModel = mongoose.model('users', users);

// Config restygoose
var config = {

	mongooseDef : mongoose, 
	prefixURL : '/api',
	sufixURL : '/rest',
	models : {
		customers : {
			//keys : ['id', 'name?']
			keys : ['_id']
		},
		users : {
			keys : ['username', 'password']
		}
	}

};

var api = new Restify(config);
app.use(api);

request = request(app);

describe('test API REST for custumers generated by restygoose.', function () {

	describe('POST', function () {

		it('It must create a custumer', function (done) {

			var data = { 
				id : 1,
				name : "Customer 1",
				lastname : "Customer 1's lastname"
			};

			async.waterfall ([

				function clearCollection (callback) {
					mongoose.connection.collections['customers'].drop(function (err) {


						mongoose.connection.collections['users'].drop(function (err) {


							callback(null);

						});

					});
				},
				function createCustumer (callback) {

					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function verifyCustomer (res, callback) {

					var resData = res.body;
					expect(resData).to.have.property('id', data.id);
					expect(resData).to.have.property('name', data.name);
					expect(resData).to.have.property('lastname', data.lastname);
					callback(null);

				}
			], done);

		});

	});

	describe('GET', function () {

		it('It must get a custumer', function (done) {

			var data = { 
				id : 1,
				name : "Customer 1",
				lastname : "Customer 1's lastname"
			};

			async.waterfall ([

				function clearCollection (callback) {
					mongoose.connection.collections['customers'].drop(function (err) {


						mongoose.connection.collections['users'].drop(function (err) {


							callback(null);

						});

					});
				},
				function createCustumer (callback) {

					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function getCustomer (res, callback) {

					request
						.get ('/api/customers/rest/' + res.body._id)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function verifyCustomer (res, callback) {

					var resData = res.body;
					expect(resData).to.have.property('id', data.id);
					expect(resData).to.have.property('name', data.name);
					expect(resData).to.have.property('lastname', data.lastname);
					callback(null);

				}
			], done);

		});

	});

	describe('PUT', function () {

		it('It must update a custumer', function (done) {

			var data = { 
				id : 1,
				name : "Customer 1",
				lastname : "Customer 1's lastname"
			};

			async.waterfall ([

				function clearCollection (callback) {
					mongoose.connection.collections['customers'].drop(function (err) {


						mongoose.connection.collections['users'].drop(function (err) {


							callback(null);

						});

					});
				},
				function createCustumer (callback) {

					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function getCustomer (res, callback) {

					request
						.get ('/api/customers/rest/' + res.body._id)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function verifyCustomer (res, callback) {

					var resData = res.body;
					expect(resData).to.have.property('id', data.id);
					expect(resData).to.have.property('name', data.name);
					expect(resData).to.have.property('lastname', data.lastname);
					callback(null, res);

				},
				function updateCustomer (res, callback) {

					data.id = 1;
					data.name = 'Customer 1 updated';
					data.lastname = "Customer 1's lastname updated";
					request
						.put ('/api/customers/rest/' + res.body._id)
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);
					
				},
				function verifyCustomerUpdated (res, callback) {
					
					var resData = res.body;
					expect(resData).to.have.property('id', data.id);
					expect(resData).to.have.property('name', data.name);
					expect(resData).to.have.property('lastname', data.lastname);
					callback(null);

				}
			], done);

		});


	});
	
	describe('DELETE', function () {

		it('It must delete a custumer', function (done) {

			var data = { 
				id : 1,
				name : "Customer 1",
				lastname : "Customer 1's lastname"
			};

			async.waterfall ([

				function clearCollection (callback) {
					mongoose.connection.collections['customers'].drop(function (err) {


						mongoose.connection.collections['users'].drop(function (err) {


							callback(null);

						});

					});
				},
				function createCustumer (callback) {

					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function deleteCustomer (res, callback) {

					request
						.delete ('/api/customers/rest/' + res.body._id)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);

				},
				function getCustomer (res, callback) {
				
					request
						.get ('/api/customers/rest/' + res.body._id)
						.expect(404)
						.expect('Content-Type', /application\/json/)
						.end (callback);
	
				},
				function verifyCustomer (res, callback) {

					if (res.body.id)
						throw new Error('custemer was not deleted');
						
					callback(null);

				}
			], done);

		});

	});

	describe('LIST', function () {

		it('It must return a list of customers', function (done) {

			var idCntr = 0;
			
			function createCustumer (callback) {

				idCntr++;
				var data = { 
					id : idCntr,
					name : "Customer " + idCntr,
					lastname : "Customer " + idCntr + "'s lastname"
				};

				request
					.post ('/api/customers/rest')
					.set('Accept', 'application/json')
					.send(data)
					.expect(200)
					.expect('Content-Type', /application\/json/)
					.end (callback);

			}

			async.waterfall ([

				function clearCollection (callback) {
					mongoose.connection.collections['customers'].drop(function (err) {


						mongoose.connection.collections['users'].drop(function (err) {


							callback(null);

						});

					});
				},
				function createCustumer (callback) {
		
					idCntr++;
					var data = { 
						id : idCntr,
						name : "Customer " + idCntr,
						lastname : "Customer " + idCntr + "'s lastname"
					};
		
					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);
		
				},
				function createCustumer (res, callback) {
		
					idCntr++;
					var data = { 
						id : idCntr,
						name : "Customer " + idCntr,
						lastname : "Customer " + idCntr + "'s lastname"
					};
		
					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);
		
				},
				function createCustumer (res, callback) {
		
					idCntr++;
					var data = { 
						id : idCntr,
						name : "Customer " + idCntr,
						lastname : "Customer " + idCntr + "'s lastname"
					};
		
					request
						.post ('/api/customers/rest')
						.set('Accept', 'application/json')
						.send(data)
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);
		
				},
				function getCustomers (res, callback) {
					
					request
						.get ('/api/customers/rest')
						.expect(200)
						.expect('Content-Type', /application\/json/)
						.end (callback);
	
				},
				function verifyCustomer (res, callback) {

					if (res.body.length != 3)
						throw new Error('List is not complete.');
						
					callback(null);

				}
			], done);

		});

	});

});

